/* -----------------------------------------------------------
  Mixins
----------------------------------------------------------- */

/* ------- Respond above ------- */

// @include respond-above(sm) {}
@mixin respond-above($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (min-width: $breakpoint-value) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

/* ------- Respond below ------- */

// @include respond-below(sm) {}
@mixin respond-below($breakpoint) {
  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {
    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

    // If the breakpoint doesn't exist in the map.
  } @else {
    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

/* ------- Respond between ------- */

// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    // Get the lower and upper breakpoints.
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);

    // Write the media query.
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }

    // If one or both of the breakpoints don't exist.
  } @else {
    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {
      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {
      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

/* ------- Accessibility ------- */

@mixin visually-hidden {
  // This code is based on this article:
  // https://www.a11yproject.com/posts/2013-01-11-how-to-hide-content

  clip: rect(0 0 0 0);
  clip-path: inset(50%);
  height: 1px;
  overflow: hidden;
  position: absolute;
  white-space: nowrap;
  width: 1px;
}

/* ------- Typography ------- */

@mixin line-height($line-height, $isImportant: false) {
  $key: strip-unit($line-height);
  $result: map-get($line-heights, $key);
  $result-ar: map-get($line-heights-ar, $key);

  // Use the given value if it's not in the list
  @if $result == null {
    $result: $line-height;
    $result-ar: if($key > 50, null, 1.25 * $line-height);
  }

  $suffix: if($isImportant, ' !important', '');

  line-height: rem($result) + $suffix;

  @if ($result-ar) {
    html[lang^='ar'] & {
      line-height: rem($result-ar) + $suffix;
    }
  }
}

@mixin font-size($font-size, $line-height: null, $isImportant: false) {
  $key: strip-unit($font-size);
  $result: map-get($font-sizes, $key);
  $result-ar: map-get($font-sizes-ar, $key);

  // Use the given value if it's not in the list
  @if $result == null {
    $result: $font-size;
    $result-ar: if($key > 44, null, 1.25 * $font-size);
  }

  $suffix: if($isImportant, ' !important', '');

  font-size: rem($result) + $suffix;

  @if $result-ar {
    html[lang^='ar'] & {
      font-size: rem($result-ar) + $suffix;
    }
  }

  // If not provided use `line-height` that corresponds
  // to the given `font-size`
  @if $line-height == null {
    $index: index($font-sizes, $key $result);
    @if $index != null {
      $lineKey: nth(map-keys($line-heights), $index);
      $line-height: map-get($line-heights, $lineKey);
    }
  }

  // Omit `line-height` in case of custom `font-size`
  // and no `line-height` attribute
  @if ($line-height) {
    @include line-height($line-height, $isImportant);
  }
}

@mixin hsbc-font($isImportant: false) {
  $suffix: if($isImportant, ' !important', '');

  font-family: #{$hsbc-font + $suffix};

  html[lang^='ar'] & {
    font-family: #{$hsbc-font-arabic + $suffix};
  }

  html[lang^='hy-am'] & {
    font-family: #{$hsbc-font-armenian + $suffix};
  }

  html[lang^='zh-cn'] & {
    font-family: #{$hsbc-font-simplified-chinese + $suffix};
  }

  html[lang^='zh-hk'] &,
  html[lang^='zh-mo'] &,
  html[lang^='zh-tw'] & {
    font-family: #{$hsbc-font-traditional-chinese + $suffix};
  }
}
